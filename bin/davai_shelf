#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
A shelf is a Vortex pseudo-experiment in which are stored input data as in a Vortex experiment.
This tool helps to move shelves between archive, marketplace cache and tarfiles.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import sys
import argparse
import configparser
import tempfile
import subprocess
import tarfile

# Automatically set the python path
package_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, package_path)
from davai_api import get_in_config, guess_host

# set variables
host = guess_host()
vortex_cache_config = os.path.join(get_in_config('packages_{}'.format(host), 'vortex'),
                                   'conf', 'cache-{}.ini'.format(host))
cache_config = configparser.ConfigParser()
cache_config.read(vortex_cache_config)
cache_config.read(cache_config['marketplace-vortex']['externalconf_davai_path'])
marketplacecache_rootdir = cache_config['marketplace_xp']['rootdir']


class Shelf(object):
    """A shelf is a Vortex pseudo-experiment in which are stored input data as in a Vortex experiment."""

    vtx_vapp_vconf = os.path.join('vortex', 'davai', 'shelves')
    rootdir = os.path.join(marketplacecache_rootdir, vtx_vapp_vconf)

    def __init__(self, shelf):
        if shelf.endswith('.tar') or shelf.endswith('.tgz'):
            self.name = shelf[:-4]
            self.tarfile = shelf
        else:
            self.name = shelf
            self.tarfile = shelf + '.tar'
        self.radical, self.user = shelf.split('@')

    def mkt2tar(self, out_dir=None, gz_compression=False, **_):
        """Tar (and compress) a shelf into a tar/tgz."""
        openmode = 'w'
        if gz_compression:
            self.tarfile = self.tarfile.replace('.tar', '.tgz')
            openmode = 'w:gz'
        current = os.getcwd()
        if out_dir is None:
            out_dir = current
        os.chdir(self.rootdir)
        out_filename = os.path.join(out_dir, self.tarfile)
        with tarfile.open(out_filename, openmode) as t:
            t.add(self.name)
        os.chdir(current)

    def tar2mkt(self, **_):
        """Extracts a tar/tgz shelf into marketplacecache."""
        assert os.path.exists(self.tarfile)
        with tarfile.open(self.tarfile, 'r') as t:
            t.extractall(path=self.rootdir)

    def _mkt_arch(self, archive, to='arch'):
        if to == 'arch':
            mirror_args = ['-R', self.name, self.radical]
        else:
            mirror_args = ['', self.radical, self.name]
        lftp_script = [
            '#!/usr/bin/bash',
            'cd {}'.format(self.rootdir),
            'lftp {}@{} <<EOG'.format(self.user, archive),
            'cd {}'.format(self.vtx_vapp_vconf),
            'mirror {} {} {}'.format(*mirror_args),
            'bye',
            'EOG',
            ]
        temp_request = tempfile.mkstemp()[1]
        print("Temp request:", temp_request)
        with open(temp_request, 'w') as req:
            req.writelines([line + '\n' for line in lftp_script])
        subprocess.check_call(['bash', temp_request])

    def mkt2arch(self, archive, **_):
        """For a shelf = radical@user, mirrors *shelf* from marketplacecache to *radical* in user@archive"""
        self._mkt_arch(archive, to='arch')

    def arch2mkt(self, archive, **_):
        """For a shelf = radical@user, mirrors *radical* from user@archive into marketplacecache as *shelf*"""
        self._mkt_arch(archive, to='mkt')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Move shelves between archive, marketplace cache and tarfiles.')
    parser.add_argument('action',
                        choices=['mkt2arch', 'mkt2tar', 'tar2mkt', 'arch2mkt'],
                        help='action to realise on shelves')
    parser.add_argument('shelf',
                        help="shelf name (filename including .tar/.tgz if action is 'tar2mkt')")
    parser.add_argument('-a', '--archive',
                        help='archive machine name')
    parser.add_argument('-d', '--out_dir',
                        help="directory in which to output tarfile if action is 'mkt2tar'. " +
                             "Defaults to current directory")
    parser.add_argument('-z', '--gz_compression',
                        action='store_true',
                        default=False,
                        help='activate gz compression in tarfile export')
    args = parser.parse_args()
    if 'arch' in args.action:
        assert args.archive is not None, "archive argument (-a) must be provided with action: '{}'".format(args.action)

    shelf = Shelf(args.shelf)
    getattr(shelf, args.action)(**vars(args))

