#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
Initialize Davai environment for user.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import io
import sys
import subprocess
import argparse
import configparser

# Automatically set the python path for davai_cmd
repo_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, os.path.join(repo_path, 'src'))
from davai_cmd.env import davai_home, this_repo, user_config_file, defaults, possible_defaults_in_user_config


def main(XP_directory=defaults['XP_directory'],
         logs_directory=defaults['logs_directory']):
    """
    Initialize Davai API for user.
    """
    # set home
    if not os.path.exists(davai_home):
        os.makedirs(davai_home)
    # link repo (to have command line tools in PATH)
    link = os.path.join(davai_home, 'davai')
    if os.path.exists(link):
        overwrite = input("Relink '{}' to '{}' ? (y/n) : ".format(link, this_repo)) in ('y', 'Y')
        if overwrite:
            os.unlink(link)
        else:
            link = None
            print("Warning: initialization might not be consistent with existing link !")
    if link:
        os.symlink(this_repo, link)
        print("To finalize setup, please export and/or copy to .bash_profile:")
        print("export PATH=$PATH:{}/bin".format(link))
    # set user_config
    user_config = configparser.ConfigParser()
    user_config.add_section('davai')
    if XP_directory != defaults['XP_directory']:
        user_config['davai']['XP_directory'] = XP_directory
    if logs_directory != defaults['logs_directory']:
        user_config['davai']['logs_directory'] = logs_directory
    user_config.add_section('packages')
    # write user config
    write_user_config = True
    if os.path.exists(user_config_file):
        overwrite = input("Overwrite '{}' ? (y/n) : ".format(user_config_file)) in ('y', 'Y')
        if not overwrite:
            write_user_config = False
            print("Warning: initialization might not be consistent with user config !")
    if write_user_config:
        with io.open(user_config_file, 'w') as out:
            user_config.write(out)
        print("\nUser config written in '{}'".format(user_config_file))
    print("DAVAI initialization completed.")
    print("------------------------------")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Initialize Davai environment for user.")
    parser.add_argument('-x', '--XP_directory',
                        help="path in which to create experiments; defaults to: '{}'".format(
                            defaults['XP_directory']),
                        default=defaults['XP_directory'])
    parser.add_argument('-l', '--logs_directory',
                        help="path in which to store log files; defaults to: '{}'".format(
                            defaults['logs_directory']),
                        default=defaults['logs_directory'])
    parser.add_argument('-d', '--defaults',
                        help=possible_defaults_in_user_config.__doc__,
                        action='store_true')
    args = parser.parse_args()
    if args.defaults:
        print(possible_defaults_in_user_config.__doc__)
        possible_defaults_in_user_config()
        exit(0)
    else:
        main(XP_directory=args.XP_directory,
             logs_directory=args.logs_directory)

