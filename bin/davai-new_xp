#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
Create a new Davai experiment.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import argparse
import sys
import subprocess
import io

# Automatically set the python path for davai_cmd
repo_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, os.path.join(repo_path, 'src'))
from davai_env import guess_host, config
from davai_env.experiment import XPmaker

DAVAI_HOST = guess_host()


def main(davai_tests_version,
         IAL_git_ref,
         IAL_repository=config['paths']['IAL_repository'],
         usecase=config['defaults']['usecase'],
         comment=None,
         davai_tests_remote=config['defaults']['davai_tests_origin'],
         host=DAVAI_HOST):
    """
    Setup an XP.

    :param davai_tests_version: version of the test bench to be used
    :param IAL_git_ref: the IFS-Arpege-LAM git reference to be tested
    :param IAL_repository: path to the IAL repository in which to get **IAL_git_ref** sources
    :param usecase: among NRV, ELP, PC, ...
    :param comment: descriptive comment for the experiment (defaults to **IAL_git_ref**)
    :param davai_tests_remote: to pick tests version from a remote; None or False to pick local branch
    :param host: name of host machine, to link necessary packages and get according config file
        (otherwise guessed)
    """
    xp = XPmaker.new_xp(davai_tests_version=davai_tests_version,
                        particular_config=dict(IAL_git_ref=IAL_git_ref,
                                               IAL_repository=IAL_repository,
                                               comment=comment),
                        davai_tests_remote=davai_tests_remote,
                        usecase=usecase,
                        host=host)
    xp.write_genesis(" ".join(sys.argv))


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Create a Davai experiment based on a Git reference.')
    parser.add_argument('IAL_git_ref',
                        help="IFS-Arpege-LAM Git reference to be tested")
    parser.add_argument('-v', '--tests_version',
                        dest='davai_tests_version',
                        help="Version of the Davai test bench to be used.",
                        required=True)
    parser.add_argument('-c', '--comment',
                        default=None,
                        help="Comment about experiment. Defaults to IAL_git_ref.")
    parser.add_argument('--repo', '--IAL_repository',
                        default=config['paths']['IAL_repository'],
                        dest='IAL_repository',
                        help="Path to IFS-Arpege-LAM Git repository. " +
                             ("Default ({}) can be set through section [paths] " +
                              "of user config file").format(config['paths']['IAL_repository']))
    parser.add_argument('-u', '--usecase',
                        default=config['defaults']['usecase'],
                        help="Usecase: NRV (restrained set of canonical tests) or ELP (extended elementary tests); " +
                             "More (PC, ...) to come. Defaults to: '{}'".format(config['defaults']['usecase']))
    parser.add_argument('--remote', '--davai_tests_remote',
                        default=config['defaults']['davai_tests_origin'],
                        dest='davai_tests_remote',
                        help="DAVAI-tests remote reporitory to be used; defaults to '{}'".format(
                            config['defaults']['davai_tests_origin']))
    parser.add_argument('--host',
                        default=DAVAI_HOST,
                        help="Generic name of host machine, in order to find paths to necessary packages. " +
                             ("Default is guessed ({}), or can be set through " +
                              "section 'hosts' of user config file").format(DAVAI_HOST))
    args = parser.parse_args()

    main(args.davai_tests_version, args.IAL_git_ref,
         IAL_repository=args.IAL_repository,
         usecase=args.usecase,
         comment=args.comment,
         davai_tests_remote=args.davai_tests_remote,
         host=args.host)
