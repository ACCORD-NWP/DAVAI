#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
Create a Davai experiment based on a **git_ref**.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import shutil
import io
import argparse
import re
import sys
import getpass
import subprocess

# Automatically set the python path
package_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, package_path)
from davai_api import (this_repo, guess_host, general_config, user_config,
                       defaults, next_xp_num)

DAVAI_HOST = guess_host()
# CLEANME: repo will be in bundle
DAVAI_IAL_REPOSITORY = os.environ.get('DAVAI_IAL_REPOSITORY',
                                      os.path.join(os.environ.get('HOME'), 'repositories', 'arpifs'))


class AnXP(object):
    """Setup an XP."""

    def __init__(self, IAL_git_ref,
                 IAL_repository=DAVAI_IAL_REPOSITORY,
                 usecase=defaults['usecase'],
                 ref_xpid='NONE',
                 comment=None,
                 host=DAVAI_HOST,
                 XP_directory=defaults['XP_directory'],
                 logs_directory=defaults['logs_directory'],
                 dev_mode=False):
        """
        Initialize an XP.

        :param IAL_git_ref: the IFS-Arpege-LAM git reference to be tested
        :param usecase: among NRV, ELP, PC, ...
        :param IAL_repository: path to the IAL repository in which to get **IAL_git_ref** sources
        :param comment: descriptive comment for the experiment (defaults to **IAL_git_ref**)
        :param host: name of host machine, to link necessary packages and get according config file
            (otherwise guessed)
        :param XP_directory: to specify a directory in which to create experiment, different from the default one
            defined in user_config.ini
        :param logs_directory: path in which to store log files
        :param dev_mode: to link tasks sources rather than to copy them
        """
        # initialisations
        self.IAL_git_ref = IAL_git_ref
        self.IAL_repository = IAL_repository
        assert usecase in ('NRV', 'ELP'), "Usecase not implemented yet: " + usecase
        self.usecase = usecase
        self.xpid = '{:03}%{}@{}'.format(next_xp_num(), IAL_git_ref, getpass.getuser())
        self.ref_xpid = ref_xpid
        self.comment = comment if comment is not None else IAL_git_ref
        self.vconf = usecase.lower()
        self.host = host
        self.XP_path = os.path.join(XP_directory, self.xpid, 'davai', self.vconf)
        self.logs_directory = logs_directory
        self.dev_mode = dev_mode  # dev mode links tasks/runs to modify them easily
        # packages
        self.packages = {}
        self.read_packages_from_config(general_config)
        self.read_packages_from_config(user_config)

    def read_packages_from_config(self, config):
        """Read packages location according to *host* from Davai config."""
        section = 'packages_' + self.host
        if section in config.sections():
            for k, v in config[section].items():
                self.packages[k] = v

    def setup(self):
        """Setup the XP."""
        if os.path.exists(self.XP_path):
            raise FileExistsError("XP path: '{}' already exists".format(self.XP_path))
        else:
            os.makedirs(self.XP_path)
            os.chdir(self.XP_path)
        self._set_conf()
        self._set_tasks()
        self._set_runs()
        self._link_packages()
        self._link_logs()
        print("------------------------------------")
        print("DAVAI xp has been successfully setup:")
        print("* XPID:", self.xpid)
        print("* XP path:", self.XP_path)
        print("------------------------------------")
        print("Now go to the XP path above and:")
        print("* if necessary, tune experiment in {}".format(self._XP_config_file))
        print("* launch using: ./run.sh")
        print("------------------------------------")

    def set(self, source, target):
        """Wrapper for copy/link depending on self.dev_mode."""
        if self.dev_mode:
            os.symlink(source, target)
        else:
            if os.path.isfile(source):
                shutil.copy(source, target)
            else:
                shutil.copytree(source, target)

    def _set_tasks(self):
        """Set tasks (templates)."""
        self.set(os.path.join(this_repo, 'tasks'),
                 'tasks')

    @property
    def _host_XP_config_file(self):
        """Relative path of XP config file, according to host."""
        return os.path.join('conf', '{}.ini'.format(self.host))

    @property
    def _XP_config_file(self):
        """Relative path of local XP config file."""
        return os.path.join('conf', 'davai_{}.ini'.format(self.vconf))

    def _set_conf(self):
        """Copy and update XP config file."""
        # initialize
        os.makedirs('conf')
        shutil.copy(os.path.join(this_repo, self._host_XP_config_file),
                    self._XP_config_file)
        to_set_in_config = {k:getattr(self, k)
                            for k in
                            ('IAL_git_ref', 'IAL_repository', 'usecase', 'comment', 'ref_xpid')}
        # and replace:
        # (here we do not use ConfigParser to keep the comments)
        with io.open(self._XP_config_file, 'r') as f:
            config = f.readlines()
        for i, line in enumerate(config):
            if line[0] not in (' ', '#', '['):  # special lines
                for k, v in to_set_in_config.items():
                    pattern = '(?P<k>{}\s*=).*\n'.format(k)
                    match = re.match(pattern, line)
                    if match:
                        config[i] = match.group('k') + ' {}\n'.format(v)
                        print(" -> is set in config: {}".format(config[i].strip()))
        with io.open(self._XP_config_file, 'w') as f:
            f.writelines(config)

    def _set_runs(self):
        """Set run-wrapping scripts."""
        for r in ('run.sh', 'setup_ciboulai.sh', 'packbuild.sh'):
            self.set(os.path.join(this_repo, 'runs', r), r)
        self.set(os.path.join(this_repo, 'runs', '{}_tests.sh'.format(self.usecase)),
                 'tests.sh')

    def _link_packages(self):
        """Link necessary packages in XP."""
        os.symlink(os.path.join(this_repo, 'davai_api'), 'davai_api')
        for package, path in self.packages.items():
            os.symlink(path, package)

    def _link_logs(self):
        """Link a 'logs' directory."""
        logs = os.path.join(self.logs_directory, self.xpid)
        if not os.path.exists(logs):
            os.makedirs(logs)
        os.symlink(logs, 'logs')


def main(tests_version,
         IAL_git_ref,
         IAL_repository=DAVAI_IAL_REPOSITORY,
         usecase=defaults['usecase'],
         ref_xpid='NONE',
         comment=None,
         host=DAVAI_HOST,
         XP_directory=defaults['XP_directory'],
         logs_directory=defaults['logs_directory'],
         dev_mode=False):
    """
    Setup an XP.

    :param tests_version: version of the test bench to be used
    :param IAL_git_ref: the IFS-Arpege-LAM git reference to be tested
    :param IAL_repository: path to the IAL repository in which to get **IAL_git_ref** sources
    :param usecase: among NRV, ELP, PC, ...
    :param comment: descriptive comment for the experiment (defaults to **IAL_git_ref**)
    :param host: name of host machine, to link necessary packages and get according config file
        (otherwise guessed)
    :param XP_directory: to specify a directory in which to create experiment, different from the default one
        defined in user_config.ini
    :param logs_directory: path in which to store log files
    :param dev_mode: to link tasks sources rather than to copy them
    """
    # Switch to required version of the tests
    git_branch = subprocess.check_output(['git', 'branch'],
                                         cwd=this_repo, stderr=None).decode('utf-8').split('\n')
    head = [line.strip() for line in git_branch if line.startswith('*')][0][2:]
    if head != tests_version:
        print("Switch davai_api repo from current '{}' to tests_version '{}'".format(
            head, tests_version))
        subprocess.check_call(['git', 'checkout', 'origin/{}'.format(tests_version)], cwd=this_repo)
    # Set XP
    XP = AnXP(IAL_git_ref,
              IAL_repository=IAL_repository,
              usecase=usecase,
              ref_xpid=ref_xpid,
              comment=comment,
              host=host,
              XP_directory=XP_directory,
              logs_directory=logs_directory,
              dev_mode=dev_mode)
    XP.setup()


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Create a Davai experiment based on a Git reference.')
    parser.add_argument('IAL_git_ref',
                        help="IFS-Arpege-LAM Git reference to be tested")
    parser.add_argument('-v', '--tests_version',
                        help="Version of the test bench to be used.",
                        required=True)
    parser.add_argument('--repo', '--IAL_repository',
                        default=DAVAI_IAL_REPOSITORY,
                        dest='IAL_repository',
                        help="Path to IFS-Arpege-LAM Git repository. " +
                             "Default ({}) can be set through $DAVAI_IAL_REPOSITORY".format(DAVAI_IAL_REPOSITORY))
    parser.add_argument('-u', '--usecase',
                        default=defaults['usecase'],
                        help="Usecase: NRV (restrained set of canonical tests) or ELP (extended elementary tests); " +
                             "More (PC, ...) to come. Defaults to: '{}'".format(defaults['usecase']))
    parser.add_argument('-r', '--ref_xpid',
                        default='NONE',
                        help="Reference XPID, to compare results to")
    parser.add_argument('-c', '--comment',
                        default=None,
                        help="Comment about experiment. Defaults to IAL_git_ref.")
    parser.add_argument('-d', '--XP_directory',
                        default=defaults['XP_directory'],
                        help="Path to experiments directory (default: '{}').".format(defaults['XP_directory']))
    parser.add_argument('-l', '--logs_directory',
                        help="path in which to store log files; defaults to: '{}'".format(
                            defaults['logs_directory']),
                        default=defaults['logs_directory'])
    parser.add_argument('--host',
                        default=DAVAI_HOST,
                        help="Generic name of host machine, in order to find paths to necessary packages. " +
                             "Default is guessed ({}), or can be set through $DAVAI_HOST".format(DAVAI_HOST))
    parser.add_argument('--dev_mode',
                        default=False,
                        action='store_true',
                        help="to link tasks sources rather than to copy them")
    args = parser.parse_args()

    main(args.tests_version, args.IAL_git_ref,
         IAL_repository=args.IAL_repository,
         usecase=args.usecase,
         ref_xpid=args.ref_xpid,
         comment=args.comment,
         host=args.host,
         XP_directory=args.XP_directory,
         logs_directory=args.logs_directory,
         dev_mode=args.dev_mode)

