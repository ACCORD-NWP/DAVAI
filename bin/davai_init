#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
Initialize Davai API for user.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import io
import sys
import subprocess
import argparse
import configparser

# Automatically set the python path
package_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, package_path)
from davai_api import (davai_home, this_repo, user_config_file, 
                       default_local_repo, default_XP_directory, default_logs_directory)

# defaults


def main(local_repo=default_local_repo,
         XP_directory=default_XP_directory,
         logs_directory=default_logs_directory):
    """
    Initialize Davai API for user.
    """
    # set directories
    local_repo = os.path.abspath(os.path.expanduser(local_repo))
    if not os.path.exists(davai_home):
        os.makedirs(davai_home)
    parent_directory = os.path.dirname(local_repo)
    if not os.path.exists(parent_directory):
        os.makedirs(parent_directory)
    # clone API
    ok = input("Confirm cloning Davai API to '{}' (y/n) [y] : ".format(local_repo)) in ("y", "Y", "")
    if ok:
        if os.path.exists(local_repo):
            raise OSError("'{}' already exists !".format(local_repo))
        subprocess.check_call(['git', 'clone', this_repo, local_repo])
    else:
        print("Exit.")
        exit()
    # set user_config
    user_config = configparser.ConfigParser()
    user_config.add_section('davai')
    if local_repo != default_local_repo:
        user_config['davai']['local_repo'] = local_repo
    if XP_directory != default_XP_directory:
        user_config['davai']['XP_directory'] = XP_directory
    if logs_directory != default_logs_directory:
        user_config['davai']['logs_directory'] = logs_directory
    user_config.add_section('packages')
    if os.path.exists(user_config_file):
        overwrite = input("Overwrite '{}' ? (y/n) : ".format(user_config_file)) in ('y', 'Y')
    if overwrite:
        with io.open(user_config_file, 'w') as out:
            user_config.write(out)
        print("\nUser config written in '{}'".format(user_config_file))
    else:
        print("Warning: initialization might not be consistent with user config !")
    # final write
    print("To finalize setup, please export and/or copy to .bash_profile:")
    print("# DAVAI API:")
    print("export PATH=$PATH:{}/bin\n".format(local_repo))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Initialize Davai API for user.")
    parser.add_argument('-r', '--local_repo',
                        help="path in which will be locally cloned the Davai API; defaults to: '{}'".format(
                            default_local_repo),
                        default=default_local_repo)
    parser.add_argument('-x', '--XP_directory',
                        help="path in which to create experiments; defaults to: '{}'".format(
                            default_XP_directory),
                        default=default_XP_directory)
    parser.add_argument('-l', '--logs_directory',
                        help="path in which to store log files; defaults to: '{}'".format(
                            default_logs_directory),
                        default=default_logs_directory)
    args = parser.parse_args()

    main(**vars(args))

