#!/usr/bin/env python3
# -*- coding:Utf-8 -*-
"""
Create a Davai experiment based on a **git_ref**.
"""
from __future__ import print_function, absolute_import, unicode_literals, division

import os
import shutil
import io
import argparse
import re
import configparser
import getpass
import socket
import subprocess

davai_home = os.path.join(os.environ['HOME'], '.davairc')
this_repo = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# config
general_config_file = os.path.join(this_repo, 'conf', 'general.ini')
general_config = configparser.ConfigParser()
general_config.read(general_config_file)
user_config_file = os.path.join(davai_home, 'user_config.ini')
user_config = configparser.ConfigParser()
if os.path.exists(user_config_file):
    user_config.read(user_config_file)
# defaults
default_XP_directory = None
if 'davai' in user_config.sections():
    default_XP_directory = user_config['davai'].get('XP_directory', None)
# CLEANME: bundled version
DAVAI_IAL_REPOSITORY = os.environ.get('DAVAI_IAL_REPOSITORY',
                                      os.path.join(os.environ.get('HOME'), 'repositories', 'arpifs'))


def guess_host():
    """
    Guess host from (by order of resolution):
      - $DAVAI_HOST
      - resolution from socket.gethostname() through:
        * $HOME/.davairc/user_config.ini
        * {davai_api install}/conf/general.ini
    """
    socket_hostname = socket.gethostname()
    host = os.environ.get('DAVAI_HOST', None)
    if not host:
        for config in (user_config, general_config):
            if 'hosts' in config.sections():
                for h, pattern in config['hosts'].items():
                    if re.match(pattern, socket_hostname):
                        host = h[:-len('_re_pattern')]  # h is '{host}_re_pattern'
                        break
                if host:
                    break
    if not host:
        raise ValueError("Couldn't find host in $DAVAI_HOST, " +
                         "nor guess from hostname ({}) and keys '{host}_re_pattern' " +
                         "in section 'hosts' of config files: ('{}', '{}')".format(
            socket_hostname, user_config_file, general_config_file))
    return host


class AnXP(object):
    """Setup an XP."""
    DAVAI_PACKAGES_CONFIG = os.path.join(this_repo, 'conf', 'packages.ini')
    DAVAI_LOCAL_PACKAGES_CONFIG = os.path.join(davai_home, 'packages.ini')

    def __init__(self, IAL_git_ref,
                 IAL_repository=DAVAI_IAL_REPOSITORY,
                 usecase='NRV',
                 comment=None,
                 host=None,
                 XP_directory=default_XP_directory):
        """
        Setup an XP.

        :param IAL_git_ref: the IFS-Arpege-LAM git reference to be tested
        :param usecase: among NRV, ELP, PC, ...
        :param IAL_repository: path to the IAL repository in which to get **IAL_git_ref** sources
        :param comment: descriptive comment for the experiment (defaults to **IAL_git_ref**)
        :param host: name of host machine, to link necessary packages (otherwise guessed)
        :param XP_directory: to specify a directory in which to create experiment, different from the default one
            defined in user_config.ini
        """
        # initialisations
        self.IAL_git_ref = IAL_git_ref
        self.IAL_repository = IAL_repository
        self.usecase = usecase
        self.xpid = '{}.{}@{}'.format(IAL_git_ref, usecase, getpass.getuser())  # ! consistency with davai_prep_xp: AnXP.xpid !
        self.comment = comment if comment is not None else IAL_git_ref
        self.vconf = usecase.lower()
        self.host = host
        if XP_directory is not None:
            self.XP_path = os.path.join(XP_directory, self.xpid, 'davai', self.vconf)
        else:
            raise OSError("Experiment directory must be provided by argument, " +
                          "or as 'XP_directory' in section 'davai' of config file: {}".format(user_config_file))
        # packages
        self.packages = {}
        self._read_packages_from_config(general_config)
        self._read_packages_from_config(user_config)
        # prints
        print("* XPID:", self.xpid)
        print("* XP path:", self.XP_path)

    def setup(self, dev_mode=False):
        """Setup the XP."""
        # dev mode links tasks/runs/conf to modify them easily
        self.dev_mode = dev_mode
        self._set_XP_directory()
        os.chdir(self.XP_path)
        self._get_tasks()
        self._set_conf()
        self._get_runs()
        self._link_packages()
        self._link_logs()
        print("DAVAI xp has been successfully setup.")
        print("------------------------------------")
        print("Now go to the XP path above and:")
        print("* if necessary, tune experiment in {}".format(self._config_file))
        print("* launch using: ./run.sh")
        print("---------------------------")

    def _get(self, source, target):
        """Wrapper for copy/link depending on self.dev_mode."""
        if self.dev_mode:
            os.symlink(source, target)
        else:
            if os.path.isfile(source):
                shutil.copy(source, target)
            else:
                shutil.copytree(source, target)

    def _set_XP_directory(self):
        """Create XP directory."""
        if os.path.exists(self.XP_path):
            raise FileExistsError('XP directory: {} already exists'.format(self.XP_path))
        else:
            os.makedirs(self.XP_path)

    def _get_tasks(self):
        """Get tasks (templates)."""
        self._get(os.path.join(this_repo, 'tasks'),
                  'tasks')

    @property
    def _config_file(self):
        """Local path of XP config file."""
        return os.path.join('conf', 'davai_{}.ini'.format(self.vconf))

    def _set_conf(self):
        """Copy and update XP config file."""
        # initialize
        os.makedirs('conf')
        self._get(os.path.join(this_repo, self._config_file),
                  self._config_file)
        to_set_in_config = {k:getattr(self, k)
                            for k in
                            ('IAL_git_ref', 'IAL_repository', 'usecase', 'comment')}
        # and replace:
        # (here we do not use ConfigParser to keep the comments)
        with io.open(self._config_file, 'r') as f:
            config = f.readlines()
        for i, line in enumerate(config):
            if line[0] not in (' ', '#', '['):  # special lines
                for k, v in to_set_in_config.items():
                    pattern = '(?P<k>{}\s*=).*\n'.format(k)
                    match = re.match(pattern, line)
                    if match:
                        config[i] = match.group('k') + ' {}\n'.format(v)
                        print(" -> is set in config: {}".format(config[i].strip()))
        with io.open(self._config_file, 'w') as f:
            f.writelines(config)

    def _get_runs(self):
        """Get run-wrapping scripts."""
        for r in ('run.sh', 'setup_ciboulai.sh', 'packbuild.sh',
                  '{}_tests.sh'.format(self.usecase)):
            self._get(os.path.join(this_repo, 'runs', r), r)
        os.symlink('{}_tests.sh'.format(self.usecase), 'tests.sh')

    def _link_packages(self):
        """Link necessary packages in XP."""
        self._get(os.path.join(this_repo, 'davai_jobs_mixins.py'), 'davai_jobs_mixins.py')
        for package, path in self.packages.items():
            os.symlink(path, package)

    def _read_packages_from_config(self, config):
        """Read packages location according to *host* from Davai config."""
        section = 'packages_' + self.host
        if section in config.sections():
            for k, v in config[section].items():
                self.packages[k] = v

    def _link_logs(self):
        """Link a 'logs' directory."""
        if 'davai' in user_config.sections():
            logs_directory = user_config['davai'].get('logs_directory', None)
            if logs_directory:
                os.symlink(logs_directory, 'logs')


if __name__ == '__main__':

    DAVAI_HOST = guess_host()

    parser = argparse.ArgumentParser(description='Create a Davai experiment based on a Git reference.')
    parser.add_argument('IAL_git_ref',
                        help="IFS-Arpege-LAM Git reference to be tested")
    parser.add_argument('-r', '--IAL_repository',
                        default=DAVAI_IAL_REPOSITORY,
                        help="Path to IFS-Arpege-LAM Git repository. " +
                             "Default ({}) can be set through $DAVAI_IAL_REPOSITORY".format(DAVAI_IAL_REPOSITORY))
    parser.add_argument('-v', '--tests_version',
                        help="Version of the test bench to be used.",
                        required=True)
    parser.add_argument('-u', '--usecase',
                        default='NRV',
                        help="Usecase: NRV (default, restrained set of canonical tests) or ELP (extended elementary tests)")
    parser.add_argument('-c', '--comment',
                        default=None,
                        help="Comment about experiment. Defaults to IAL_git_ref.")
    parser.add_argument('-d', '--XP_directory',
                        default=default_XP_directory,
                        help="Path to experiments directory (default: '{}').".format(default_XP_directory))
    parser.add_argument('--host',
                        default=DAVAI_HOST,
                        help="Generic name of host machine, in order to find paths to necessary packages. " +
                             "Default is guessed ({}), or can be set through $DAVAI_HOST".format(DAVAI_HOST))
    parser.add_argument('--dev_mode',
                        default=False,
                        action='store_true',
                        help="to link tasks sources rather than to copy them")
    args = parser.parse_args()

    # switch to required version of the tests
    git_branch = subprocess.check_output(['git', 'branch'],
                                         cwd=this_repo, stderr=None).decode('utf-8').split('\n')
    head = [line.strip() for line in git_branch if line.startswith('*')][0][2:]
    if head != args.tests_version:
        print("Switch davai_api repo from current '{}' to tests_version '{}'".format(
            head, args.tests_version))
        subprocess.check_call(['git', 'checkout', args.tests_version])
    # Set XP
    XP = AnXP(args.IAL_git_ref,
              IAL_repository=args.IAL_repository,
              usecase=args.usecase,
              comment=args.comment,
              host=args.host,
              XP_directory=args.XP_directory)
    XP.setup(dev_mode=args.dev_mode)

